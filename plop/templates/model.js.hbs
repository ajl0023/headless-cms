const { Model,snakeCaseMappers } = require("objection");
const AjvValidator = require('objection').AjvValidator;
const cursorMixin = require("objection-cursor");
const cursor = cursorMixin({ 
  limit: 20, 
  pageInfo: {
  total: true,
  hasNext: true
} });
class {{model_name}} extends cursor(Model) {
  static get tableName() {
    return "{{model_name}}";
  }
 
  {{#if is_parent}}
  static async afterInsert(ctx) {
    const ChildModel =
      require(`../${ctx.context.child}/${ctx.context.child}`).model;

    const res = await ChildModel.query().insert({ ...ctx.context.data });

  }
  {{/if}}
  {{#if has_parent}}
   static get superTable() {
    return "category_master";
  }
  {{/if}}

  static get jsonSchema() {
    return {
      type: 'object',
  
      properties: {
        {{#each properties}}
          {{#unless schema.is_generated}}
            {{schema.name}}: {
              type: '{{schema.type}}',
              nullable: {{schema.nullable}}
            },
     
          {{/unless}}
        {{/each}}
      }
    }
}

{{#if has_media}}
 static relationMappings = {
    images: {
      relation: Model.HasManyRelation,
      modelClass: require("../image/image").model,
      join: {
        from: "{{model_name}}.parentId",
        to: 'image.parentId'
      }
    },
    thumbnail:{
      relation: Model.HasOneRelation,
      modelClass: require("../image/image").model,
      join: {
        from: "{{model_name}}.parentId",
        to: 'image.parentId',
        
      },
      modify:{
          main:true
        }
    }
  };
{{/if}}

}

module.exports = {
  model: {{modelName}},
};
